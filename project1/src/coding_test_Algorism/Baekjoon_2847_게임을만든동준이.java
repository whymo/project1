package coding_test_Algorism;

import java.util.Scanner;

public class Baekjoon_2847_게임을만든동준이 {
	
	public static void main (String [] args) {
		
		// ===========================================================================
		// 문제 :
		// 게임에는 총 N개의 레벨이 있고, 각 레벨을 클리어할 때 마다 점수가 주어진다.
		// 플레이어의 점수는 레벨을 클리어하면서 얻은 점수의 합으로, 이 점수를 바탕으로 온라인 순위를 매긴다.
		// 동준이는 레벨을 난이도 순으로 배치했다.
		// 하지만, 실수로 쉬운 레벨이 어려운 레벨보다 점수를 많이 받는 경우를 만들었다.
		
		// 이 문제를 해결하기 위해 동준이는 특정 레벨의 점수를 감소시키려고 한다.
		// 이렇게해서 각 레벨을 클리어할 때 주는 점수가 증가하게 만들려고 한다.
		// 각 레벨을 클리어할 때 얻는 점수가 주어졌을 때, 몇 번 감소시키면 되는지 구하는 프로그램을 작성하시오.
		// 점수는 항상 양수이어야 하고, 1만큼 감소시키는 것이 1번이다.
		// 정답이 여러 가지인 경우에는 점수를 내리는 것을 최소한으로 하는 방법을 찾아야 한다.
		// ===========================================================================
		// 즉, 문제 숫자가 증가할 수록 점수가 높아야 하는 것은 지켜야 되기 때문에
		// 높은 레벨보다 낮은 레벨의 점수가 높지 않도록 낮추면 되는 것이다.
		// -1 점마다 카운트하면 안된다.
		// ===========================================================================
		
		Scanner sc = new Scanner(System.in);
		
		// 문제의 총 개수
		int n = sc.nextInt();
		
		// 문제의 점수를 원소로 넣는 배열
		int [] arr = new int [n];
		
		// 배열에 원소 넣기
		for ( int i = 0; i < n; i++ ) {
			arr[i] = sc.nextInt();
		} // for
		
		// 감소시키는 횟수
		int count = 0;
		
		// 낮은 레벨이 높은 레벨보다 점수가 높으면 감소시켜야 한다.
		// 높은 레벨부터 낮은 레벨로 탐색한다.
		// n - 2하는 이유는 인덱스 번호는 0번부터 시작하며,
		// 가장 높은 레벨의 경우에는 감소시킬 필요가 없기에
		// n - 2회만 해도 된다.
		for ( int i = n - 2; i >= 0; i-- ) {
			
			if ( arr[i] >= arr[i+1] ) {
				
				// 낮은 레벨보다 높은 레벨의 점수가 높아야 하기에
				// 낮은 레벨 점수 - 높은 레벨 점수 + 1을 통해서
				// 무조건 높은 레벨보다 낮은 레벨 점수가 1만큼 작게 설정한다.
				int ttt = arr[i] - arr[i+1] + 1;
				
				// -1만큼 카운트 해줘야 하기에
				// ttt만큼 count에 더해주면 된다.
				count += ttt;
				
				arr[i] -= ttt;
						
			} // if : 낮은 레벨의 점수를 감소시켜야 할때
			
		} // for2
		
		System.out.println(count);
		
	} // main

} // end class
