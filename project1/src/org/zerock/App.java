//2022.03.17
// 실행 파일


package org.zerock;

public class App {

	public static void main(String[] args) {
		
		// 왼쪽 변수 타입이 Animal이고 오른쪽은 Dog 타입임 틀린데 들어갔다!
		// 참조타입에도 기본타입처럼 대소관계가 있을까? 있음!
		// Dog 보다 Animal이 더 크다 -> 부모가 누구고 자식이 누구냐를 따짐!!!
		// 부모자식 관계 클래스간에는 크기가 존재한다! -> 자동형변환이 일어난다!
		// Dog 타입을 Animal 타입으로 자동형변환 해준다!
		Animal animal = new Dog();	// 자식 객체가 부모타입에 들어감 : 다형성-1
		
//		다형성-1 : 상속관계의 두 참조타입이 있을때, 자식 타입의 객체가 부모타입의 변수에 대입 가능
//					왜? 부모가 자식보다 크니까! (주의사항 : 여기서, 부모는 단순 직계존속뿐만 아니라
//												조상까지 포함함!)
		
		// sound가 메소드?
		//참조변수명.sound -> 자식 클래스에서 재정의된 강아지의 메소드가 찍힘
		animal.sound();				// 다형성-2
		
//		다형성-2 : 전제조건(다형성-1)을 충족한다면, 부모타입의 참조변수의 메소드를 호출했을때,
//					부모타입 객체의 메소드가 호출되는게 아니라, 부모로부터 상속받은 메소드가,
//					"오버라이딩" 되었을때, 이 "오버라이딩"된 메소드가 무조건 호출된다!
		
//		--------------------------------------------------------------------------
		
		
//		// Rvlaue에서 어떤 자식객체가 생성됐느냐에 따라 결과가 다르게 나옴!!
		Animal animal2 = new Cat(); // 다형성-1 // 밖에서 보면 부모 타입이지만 안에 있는건 캣이다!
		
		animal2.sound();				// 다형성-2 // 오버라이딩(재정의) 되어서 냐옹이 나온다! 
		
		
			
	} // main

} // end class
