//2022.03.25

package ramdaa.exam01_no_arguments_no_return;

import ramdaa.exam01_field.UsingThis;

// 람다식
public class MyFunctionalInterfaceExample { 
	
	public static void main(String[] args) {
		
		MyFunctionalInterface fi;
		
//		-----------------------------------------------------------------------------------
		
////		1. method : 직접 구현클래스 선언
//		
//		 fi = new MyFunctionalInterfaceImpl();		// 다형성-1
//		 
//		 fi.method();								// 다형성-2
//		
////		-------------------------------------------------------------------------------
//		 
////		 2. method : 익명구현객체 코딩 기법
//		 
//		 fi = new MyFunctionalInterface() {			// 다형성-1
//
//			@Override
//			public void method() {
//				
//				System.out.println("Anonymous::method() invoked.");
//				
//			} // method
//			 
//			 
//		 };	// 익명구현객체 생성 (클래스 이름 알 수 없음)
//		 
//		 fi.method();								// 다형성-2
//		 	
////		-------------------------------------------------------------------------------
//
////		3. method : 람다식으로 구현하자
//		 
//		 fi = () -> {								// 다형성-1
//			 System.out.println("Anonymous by Lambda :: invoked."); 
//		 }; // 람다식을 이용한 익명구현객체 생성
//		 
//		 fi.method();								// 다형성-2
//		 
//		 
////		 * 람다식이 제일 코드가 간결하고 편하다! -> 람다식을 컬렉션에 던진다!
//		 
////	--------------------------------------------------------------------------------------	
//		 
////		4. method : 람다식 중괄호 {} 생략!
//				생략조건 1 : 블록내의 실행문장이 오직 1개이면, {} 기호 생략 가능
		
//			 fi = () ->  System.out.println("Anonymous by Lambda :: invoked."); 
//			 
//			 fi.method();	
		 
//	--------------------------------------------------------------------------------------	 
//			
//			5. method2 : 매개변수 생략가능
//				생략조건2: 매개변수의 타입은 생략 가능하다
		
//			 fi = (age) -> System.out.println("Anonymous :: method2() invoked.");
//				 
//			  // Lambda expression
//		 
//			 fi.method2(23);					
//
//// --------------------------------------------------------------------------------------	 
//			 
////		6. method2 : 소괄호() 생략가능
////			생략조건3: 매개변수가 1개일때에는, () 기호도 생략 가능하다!
//		
//			 fi = age -> System.out.println("Anonymous :: method2() invoked.");
//				 
//			  // Lambda expression
//		 
//			 fi.method2(23);					

// --------------------------------------------------------------------------------------	 
			 
//			7. method1 : 매개변수 없다면 괄호() 생략 불가!
//				생략 불가능 1: 매개변수가 1개일때에는, () 기호도 생략 가능하다!
//			
//			 fi = () ->  System.out.println("Anonymous by Lambda :: invoked."); 
////			 
////			 fi.method();					
//		 
// --------------------------------------------------------------------------------------	 
			 
//			 8. method3 : return 생략
//				생략 조건 4 : 생략조건1을 만족하는 가정하에,
//						return 문장인 경우, "return" 키워드도 생략 가능

//		 	fi = () -> 	100 + 200; 
//	
//		 	fi.method3();		
			 
//			  * 리턴 키워드 있는지 없는지 알기 힘들때에는 100 + 200; 이 부분이
//		 	값을 만들어내는지 아닌지 살펴보기! 100+200 수행되면 300이라는 값이 1개가 생성됨!
//		 	
//		 	값을 생성하는 식이 왔다는 것은 return 키워드가 생략되어있다는 뜻!

// --------------------------------------------------------------------------------------		 	
			 
//			 9. method4 : 중괄호 {} 생략
//					생략조건 5 : 중괄호 {} 에 return문만 있을 경우, 중괄호 {} 생략 가능
			 
//			 fi = a ->  (int)(1 + 2 * 3 - 4 / 3.14159);
//			
//			 System.out.println("fi : " + fi);
//			 
////			 -------------------------- 생략 전 -----------------
////			 fi = age -> {
////				 
////				 return (int)(1 + 2 * 3 - 4 / 3.14159);
////			 };
////			 ---------------------------------------------------
//			 
//			fi.method4(23);
		
//	--------------------------------------------------------------------------------------
		
//		# method 4 : this 찍어보기
			
//		fi = a -> {
//
//			System.out.println(this); 	// 익명구현객체는 this 찍을 수 있었지만, 람다는 정적 메소드 블록 내에서 못찍음
//			
//			return 1000;
//	
//		};
			 
//	--------------------------------------------------------------------------------
	
//		# method 4 : TTT 인스턴스메소드로 호출
		
		TTT ttt = new TTT();
		
		System.out.println("1. ttt : " + ttt);
		
		ttt.instanceMethod(777);
		
//		결과 
//		1. ttt : ramdaa.exam01_no_arguments_no_return.TTT@372f7a8d
//		2. this ramdaa.exam01_no_arguments_no_return.TTT@372f7a8d
	
			 
		
				
		
//		===================예제================================================================
//		fi = () -> { 
//			String str = "method call1";
//			
//			System.out.println(str);ㅇ
//		}; // 람다식 : FI에 선언된 추상메소드를 Overriding하는 익명구현객체를 생성 
//										// 람다식에는 어노테이션 Overriding 못붙임
//		
//		fi.method();			//FI에 선언된 추상메소드 호출(다형성-2)

//		
//		fi = () -> { System.out.println("method call2"); };
//		fi.method();
//		
//		
//		fi = () -> System.out.println("method call3");
//		fi.method();
//		====================================================================================

	}// main
	
} // end class











